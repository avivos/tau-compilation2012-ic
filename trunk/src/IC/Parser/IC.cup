package IC.Parser;

import java_cup.runtime.*;
import IC.AST.*;
import IC.*;
import java.util.List;
import java.util.ArrayList;
import IC.UnaryOps;
parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;

private Lexer lexer;

public Parser(Lexer lexer) {
	super(lexer);
	this.lexer = lexer;
}

public int getLine() {
	return lexer.getLineNumber();
}

public void syntax_error(Symbol s){
	// do nothing
	// we want to throw an informative exception
}

public void unrecovered_syntax_error(Symbol s) throws SyntaxError {
	done_parsing();
	Token tok = (Token) s;
	if (tok.value == null)
		throw new SyntaxError("Syntax Error: unexpected token:", tok.id ,tok.getLine());
	else
		throw new SyntaxError("Syntax Error: unexpected token:", tok.id ,tok.value ,tok.getLine());
}
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	t.left = t.getLine();
if (printTokens)
	System.out.println(t.getLine() + ":" + t);
return t; 
:};


////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

terminal String ID;				
terminal INTEGER;	
terminal ASSIGN ;	
terminal BOOLEAN;	
terminal BREAK;	
terminal CLASS;	
terminal String CLASS_ID;	
terminal COMMA;
terminal CONTINUE;
terminal DIVIDE;
terminal DOT;	 
terminal EQUAL;
terminal EXTENDS;
terminal ELSE;
terminal FALSE;
terminal GT;
terminal GTE;
terminal IF;
terminal LAND;
terminal LB;
terminal LP;
terminal LCBR;
terminal LENGTH;	
terminal NEW;
terminal LNEG;
terminal LOR;
terminal LT;
terminal LTE;
terminal MINUS;
terminal MOD;
terminal MULTIPLY;
terminal NEQUAL;
terminal NULL;
terminal PLUS;
terminal RCBR;
terminal RETURN;
terminal RP;
terminal SEMI;
terminal STATIC;
terminal STRING;
terminal String QUOTE;
terminal THIS;
terminal TRUE;
terminal VOID;
terminal WHILE; 	
terminal RB;
terminal INT;
terminal UMINUS;

terminal Empty; //this describe the empty program - it solves th S/R conflict 
terminal NONEmpty;


non terminal Program program;

non terminal ICClass classDecl;
non terminal List<ICClass> class_list;
non terminal Type type;
non terminal List<Formal> formals;
non terminal List<Formal> formals_list;
non terminal Method method;
non terminal Field field;			//DEBUG
non terminal List<Field> field_list;
non terminal ParserCtrl class_code;
non terminal Location location;
non terminal Expression expr;
non terminal List<Expression> expr_list;
non terminal Statement stmt;
non terminal List<Statement> stmt_list;
non terminal StatementsBlock stmt_block;
non terminal Call call;
non terminal StaticCall staticCall;
non terminal VirtualCall virtualCall;
non terminal BinaryOp binop;
non terminal UnaryOp unop;
non terminal Literal literal;
non terminal List<String> multi_id;

//////////////////////////
// Precedence declarations
precedence right Empty, NONEmpty;
precedence right ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left EQUAL, NEQUAL;
precedence left LT, LTE, GT, GTE;
precedence left PLUS, MINUS; 
precedence left MULTIPLY, DIVIDE, MOD;
precedence right UMINUS, LNEG;
precedence left LB, RB, LP, RP, DOT;
precedence left IF, ELSE;

//////////////
// The grammar

program ::= class_list:cl {:
	RESULT = new Program(cl); 
	:};

class_list ::= class_list:list classDecl:name {:
	list.add(name);
	RESULT = list;
:}
| {:
	RESULT = new ArrayList<ICClass>();
:};

classDecl ::= CLASS CLASS_ID:name LCBR class_code:cc RCBR {:
		RESULT = new ICClass(nameleft, name, cc.releaseFieldList(), cc.releaseMethodList());
:}
| CLASS CLASS_ID:name EXTENDS CLASS_ID:parent LCBR class_code:cc RCBR {:
		RESULT = new ICClass(nameleft, name, parent, cc.releaseFieldList(), cc.releaseMethodList());
:};


class_code ::= class_code:cc field_list:f {: 
	cc.collectFields(f);
	RESULT = cc;
:} //vars in recursion
| class_code:cc method:m {: 
	cc.collectMethod(m);
	RESULT = cc;
:} // methods in recursion
| {:
	RESULT = ParserCtrl.getParserCtrl();
:};

field_list ::= type:t multi_id:list SEMI {:
	RESULT = ParserCtrl.getParserCtrl().convertToFieldList(t, list);
:};

multi_id ::= ID:name {:
	RESULT = new ArrayList<String>();
	RESULT.add(name);
:} //this is a multi var for a decleration of the form: INT a,b,c;
| multi_id:list COMMA ID:name {:
	RESULT = list;
	RESULT.add(name);	
:};

type ::= INT:name {:
	RESULT = new PrimitiveType(nameleft, DataTypes.INT);
:}
| BOOLEAN:name {:
	RESULT = new PrimitiveType(nameleft, DataTypes.BOOLEAN);
:}
| STRING:name{:
	RESULT = new PrimitiveType(nameleft, DataTypes.STRING);
:}
| CLASS_ID:name {:
	RESULT = new UserType(nameleft, name);
:}
| type:t LB RB {:
	RESULT = t;
	RESULT.incrementDimension();
:};


method ::= type:type_name ID:m_name LP formals:f RP LCBR stmt_list:sl RCBR {:
	RESULT = new VirtualMethod(type_name, m_name,f,sl); 
:}
| STATIC type:type_name ID:m_name LP formals:f RP LCBR stmt_list:sl RCBR {: 
	RESULT = new StaticMethod(type_name, m_name, f,sl); 
:}
| VOID:type_name ID:m_name LP formals:f RP LCBR stmt_list:sl RCBR {:
	RESULT = new VirtualMethod(new PrimitiveType(type_nameleft, DataTypes.VOID), m_name,f,sl); 
:}
| STATIC VOID:type_name ID:m_name LP formals:f RP LCBR stmt_list:sl RCBR {: 
	RESULT = new StaticMethod(new PrimitiveType(type_nameleft, DataTypes.VOID), m_name, f,sl); 
:};

	
stmt ::= location:loc ASSIGN expr:ex SEMI {:
	RESULT = new Assignment(loc, ex); 
:}
| call:c SEMI {:
	RESULT = new CallStatement(c);
:}
| RETURN:r SEMI {:
	RESULT = new Return(rleft);
:}
| RETURN:r expr:e SEMI {:
	RESULT = new Return(rleft,e);
:}
| IF LP expr:e RP stmt:s {:
	RESULT = new If(e, s);
:}
| IF LP expr:e RP stmt:s ELSE stmt:es {:
	RESULT = new If(e, s, es);
:}
| WHILE LP expr:e RP stmt:s {:
	RESULT = new While(e, s);
:}
| BREAK:b SEMI {:
	RESULT = new Break(bleft);
:}
| CONTINUE:c SEMI {:
	RESULT = new Continue(cleft);
:}
| stmt_block:sb {:
	RESULT = sb;
:}
| type:t ID:name SEMI {:
	RESULT = new LocalVariable(t, name);
:}
| type:t ID:name ASSIGN expr:e SEMI {:
	RESULT = new LocalVariable(t, name, e);
:};


stmt_block ::= LCBR stmt_list:sl RCBR{:
	RESULT = new StatementsBlock(slleft, sl); 
:};


stmt_list ::= stmt_list:ls stmt:s {:
	ls.add(s);
	RESULT = ls; 
:}
|{:	
	RESULT = new ArrayList<Statement>();; 
:};


expr ::= location:loc {:
	RESULT = loc;
:}
| call:c {:
	RESULT = c;
:}
| THIS:t {:
	RESULT = new This(tleft);
:}
| NEW:n CLASS_ID:cls LP RP {:
	RESULT = new NewClass(nleft, cls);	
:}
| NEW:n type:t LB expr:e RB {:
	RESULT = new NewArray(t, e);
:}
| expr:earr DOT LENGTH:len {:
	RESULT = new Length(earr);
:}
| binop:b {:
	RESULT = b;
:}
| unop:u {:RESULT = u;:}
| literal:l {:RESULT = l;:}
| LP expr:e RP {:RESULT = e; :};


call ::= staticCall:sc {:
	RESULT = sc;
:}
|virtualCall:vc {:
	RESULT = vc;
:};

expr_list ::= expr:e {:
	RESULT = new ArrayList<Expression>();
	RESULT.add(e);
:}
| expr_list:list COMMA expr:e {:
	RESULT = list;
	RESULT.add(e);
:};

staticCall ::= CLASS_ID:class_name DOT ID:method LP RP {:
	RESULT = new StaticCall(class_nameleft, class_name, method, new ArrayList<Expression>());
:}
| CLASS_ID:class_name DOT ID:method LP expr_list:el RP {:
	RESULT = new StaticCall(class_nameleft, class_name, method, el);
:};

virtualCall ::= ID:method LP RP {:
	RESULT = new VirtualCall(methodleft, method, new ArrayList<Expression>() );
:}
| ID:method LP expr_list:el RP {:
	RESULT = new VirtualCall(methodleft, method, el );
:}
| expr:e DOT ID:method LP RP {:
	RESULT = new VirtualCall(methodleft, e, method,new ArrayList<Expression>() );
	:}
| expr:e DOT ID:method LP expr_list:el RP {:
	RESULT = new VirtualCall(methodleft, e, method,el );
:}
;

location ::= ID:id {:
	RESULT = new VariableLocation(idleft, id);
:}
| expr:e DOT ID:id {:
	RESULT = new VariableLocation(eleft, e, id);
:}
| expr:ar LB expr:indx RB {:
	RESULT = new ArrayLocation(ar, indx);
:}; // is this saving the line number correctly ?



binop ::= expr:e1 PLUS:p expr:e2 {:
	RESULT = new MathBinaryOp(e1, BinaryOps.PLUS, e2);
:}
| expr:e1 MINUS expr:e2 {:
	RESULT = new MathBinaryOp(e1, BinaryOps.MINUS, e2);
:}
| expr:e1 MULTIPLY expr:e2 {:
	RESULT = new MathBinaryOp(e1, BinaryOps.MULTIPLY, e2);
:}
| expr:e1 DIVIDE expr:e2 {:
	RESULT = new MathBinaryOp(e1, BinaryOps.DIVIDE, e2);
:}
| expr:e1 MOD expr:e2 {:
	RESULT = new MathBinaryOp(e1, BinaryOps.MOD, e2);
:}
| expr:e1 LAND expr:e2 {:
	RESULT = new LogicalBinaryOp(e1, BinaryOps.LAND, e2);
:}
| expr:e1 LOR expr:e2 {:
	RESULT = new LogicalBinaryOp(e1, BinaryOps.LOR, e2);
:}
| expr:e1 LT expr:e2 {:
	RESULT = new LogicalBinaryOp(e1, BinaryOps.LT, e2);
:}
| expr:e1 LTE expr:e2 {:
	RESULT = new LogicalBinaryOp(e1, BinaryOps.LTE, e2);
:}
| expr:e1 GT expr:e2 {:
	RESULT = new LogicalBinaryOp(e1, BinaryOps.GT, e2);
:}
| expr:e1 GTE expr:e2 {:
	RESULT = new LogicalBinaryOp(e1, BinaryOps.GTE, e2);
:}
| expr:e1 EQUAL expr:e2 {:
	RESULT = new LogicalBinaryOp(e1, BinaryOps.EQUAL, e2);
:}
| expr:e1 NEQUAL expr:e2 {:
	RESULT = new LogicalBinaryOp(e1, BinaryOps.NEQUAL, e2);
:};

	
unop ::= MINUS expr:e {:
	RESULT = new MathUnaryOp(UnaryOps.UMINUS,e); 
:} %prec UMINUS
| LNEG expr:e {:
	RESULT = new LogicalUnaryOp(UnaryOps.LNEG,e); 
:}%prec LNEG;


literal ::= INTEGER:i {: 
	RESULT = new Literal(ileft, LiteralTypes.INTEGER, i);
:}
| QUOTE:q {:
	RESULT = new Literal(qleft, LiteralTypes.STRING, q);
:}
| TRUE:t {:
	RESULT = new Literal(tleft, LiteralTypes.TRUE);
:}
| FALSE:f {:
	RESULT = new Literal(fleft, LiteralTypes.FALSE);
:}
| NULL:n {:
	RESULT = new Literal(nleft, LiteralTypes.NULL);
:};

formals ::= {:
	RESULT = new ArrayList<Formal>();
:}
| formals_list:list {: 
	RESULT = list; 
:};


formals_list ::= type:t ID:name 	{: //this is param list for a method
	Formal var = new Formal(t,name);
	RESULT = new ArrayList<Formal>();
	RESULT.add(var);
:}
| formals:vars COMMA type:t ID:name	{:
	Formal var = new Formal(t,name);
	vars.add(var);
	RESULT = vars;
:};