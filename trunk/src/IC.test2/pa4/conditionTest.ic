

class Test {
	/*
	int bar(){
	return 888;
	}

	void foo(){

		Library.println("if(true)\n");
		if (true){
			Library.println("test passed\n");
		}else {
			Library.println("test failed\n");
		}
		Library.println("\n");

		Library.println("if (false) else\n");
		if (false){
			Library.println("test failed\n");
		}
		else {
			Library.println("test passed");
		}
		Library.println("\n");

		Library.println("if (false) elseif (true) else\n");
		if (false){
			Library.println("test failed\n");
		}
		else if (true){
			Library.println("test passed\n");
		}
		else {
			Library.println("test failed\n");
		}
		Library.println("\n");

		Library.println("logical operators:\n");
		Library.println("if (!false)\n");
		if (!false){
			Library.println("test passed\n");
		}else {
			Library.println("test failed\n");
		}
		Library.println("\n");

		Library.println("if (1>2)\n");
		if (1>2){
			Library.println("test failed\n");
		}
		else {
			Library.println("test passed\n");
		}
		Library.println("\n");

		Library.println("if (1<2) else\n");
		if (1 < 2) {
			Library.println("test passed\n");
		}
		else {
			Library.println("test failed\n");
		}
		Library.println("\n");

		Library.println("if (1 <= 2)\n");
		if (1 <= 2) {
			Library.println("test passed\n");
		}
		else {
			Library.println("test failed\n");
		}
		Library.println("\n");

		Library.println("if (2 >= 1)\n");
		if (2 >= 1){
			Library.println("test passed\n");
		}else {
			Library.println("test failed\n");
		}
		Library.println("\n");

		Library.println("if (1 == 1)\n");
		if (1 == 1) {
			Library.println("test passed\n");
		}else {
			Library.println("test failed\n");
		}
		Library.println("\n");

		Library.println("if (1 != 2)\n");
		if (1 != 2){
			Library.println("test passed\n");
		}else {
			Library.println("test failed\n");
		}
		Library.println("\n");

		Library.println("if (true && true)\n");
		if (true && true){
			Library.println("test passed\n");
		}else {
			Library.println("test failed\n");
		}
		Library.println("\n");

		Library.println("if (true && false) else");
		if (true && false){
			Library.println("failed");
		}
		else {
			Library.println("passed");
		}
		Library.println("");

		Library.println("if (false && true) else");
		if (false && true){
			Library.println("failed");
		}
		else {
			Library.println("passed");
		}
		Library.println("");

		Library.println("if (false && false) else");
		if (false && false){
			Library.println("failed");
		}
		else {
			Library.println("passed");
		}
		Library.println("");

		Library.println("if (false || true)\n");
		if (false || true){
			Library.println("test passed\n");
		}else {
			Library.println("test failed\n");
		}
		Library.println("\n");

		Library.println("if (true || false)");
		if (true || false){
			Library.println("test passed");
		}else {
			Library.println("test failed");
		}
		Library.println("");

		Library.println("if (true || true)\n");
		if (true || true){
			Library.println("test passed\n");
		}else {
			Library.println("test failed\n");
		}
		Library.println("\n");

		Library.println("if (false || false)\n");
		if (false || false){
			Library.println("test failed\n");
		}else {
			Library.println("test test\n");
		}
		Library.println("\n");

		Library.println("END OF TEST\n");


		int w = (2/22);//-5;  + bar();
		Library.printi(w);
		//int y = bar();

		string a = "this is ";
		string b = "a good test";

		Library.println(a+b);

		return;
	}



	 */


	static void main(string[] args) {
		Virtual x = new Virtual();
		Virtual[] y = new Virtual[2];

		x.i = 0;
		Library.printi(x.bar());
		Library.println("");	
		Library.printi(x.barcopy());

		Library.println("");	
		Library.println("");	

		y[1] = new Virtual();
		y[1].i = 0;
		Library.printi(y[1].bar());
		Library.println("\n");	
		Library.printi(y[1].barcopy());
		
		Library.println("");	
		Library.println("");


		VirtJr z = new VirtJr();
		z.i = 0;
		Library.printi(z.bar());
		Library.println("\n");	
		Library.printi(z.barcopy());
		Library.println("\n");	
		int temp = z.deepbar();
		Library.printi(temp);
		Virtual vir = z;   //this is casting
		Library.println("\n");	
		Library.printi(vir.bar());


	}
}

class Virtual{
	int i;
	int bar(){
		i = i+1;
		return i;
	}

	int barcopy(){
		return this.bar();
	}
}


class VirtJr extends Virtual{
	int deepbar(){
		return barcopy();
	}

}
