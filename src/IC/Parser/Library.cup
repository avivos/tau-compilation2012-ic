package IC.Parser;

import java_cup.runtime.*;
import IC.AST.*;
import IC.DataTypes;
import java.util.List;
import java.util.ArrayList;
import IC.UnaryOps;

parser code  {:
	/** Causes the parser to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;

private Lexer lexer;

public LibraryParser(Lexer lexer) {
	super(lexer);
	this.lexer = lexer;
}

public int getLine() {
	return lexer.getLineNumber();
}

public void syntax_error(Symbol s) {
	Token tok = (Token) s;
	System.out.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
}
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	t.left = t.getLine();
if (printTokens)
	System.out.println(t.getLine() + "::" + t);
return t; 
:};


////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

terminal String ID;				
terminal INTEGER;	
terminal ASSIGN ;	
terminal BOOLEAN;	
terminal BREAK;	
terminal CLASS;	
terminal String CLASS_ID;	
terminal COMMA;
terminal CONTINUE;
terminal DIVIDE;
terminal DOT;	 
terminal EQUAL;
terminal EXTENDS;
terminal ELSE;
terminal FALSE;
terminal GT;
terminal GTE;
terminal IF;
terminal LAND;
terminal LB;
terminal LP;
terminal LCBR;
terminal LENGTH;	
terminal NEW;
terminal LNEG;
terminal LOR;
terminal LT;
terminal LTE;
terminal MINUS;
terminal MOD;
terminal MULTIPLY;
terminal NEQUAL;
terminal NULL;
terminal PLUS;
terminal RCBR;
terminal RETURN;
terminal RP;
terminal SEMI;
terminal STATIC;
terminal STRING;
terminal QUOTE;
terminal THIS;
terminal TRUE;
terminal VOID;
terminal WHILE; 	
terminal RB;
terminal INT;
terminal UMINUS;

terminal Empty; //this describe the empty program - it solves th S/R conflict 
terminal NONEmpty;



non terminal ICClass classDecl;
non terminal List<Method> methodDeclList;
non terminal Type type;
non terminal List<Formal> formals;
non terminal List<Formal> formals_list;
non terminal LibraryMethod method;

//////////////////////////
//Precedence declarations
precedence right Empty, NONEmpty;
precedence right ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left EQUAL, NEQUAL;
precedence left LT, LTE, GT, GTE;
precedence left PLUS, MINUS; 
precedence left MULTIPLY, DIVIDE, MOD;
precedence right UMINUS, LNEG;
precedence left LB, RB, LP, RP, DOT;
precedence left IF, ELSE;

//////////////
//grammar

classDecl ::= CLASS CLASS_ID:name LCBR methodDeclList:dclList RCBR {:
	RESULT = new ICClass(nameleft, (String)name, new ArrayList<Field>(), dclList);
:};


methodDeclList ::= methodDeclList:dclList method:m {:
	RESULT = dclList;
	RESULT.add(m);
:}
| {: 
	RESULT = new ArrayList<Method>();
:};


method ::= STATIC type:type_name ID:m_name LP formals:f RP SEMI {: 
	RESULT = new LibraryMethod(type_name, m_name, f); 
:};


type ::= INT:name {:
	RESULT = new PrimitiveType(nameleft, DataTypes.INT);
:}
| BOOLEAN:name {:
	RESULT = new PrimitiveType(nameleft, DataTypes.BOOLEAN);
:}
| STRING:name{:
	RESULT = new PrimitiveType(nameleft, DataTypes.STRING);
:}
| VOID:name {:
	RESULT = new PrimitiveType(nameleft, DataTypes.VOID);
:}
| CLASS_ID:name {:
	RESULT = new UserType(nameleft, name);
:}
| INT:name LB RB {:
	RESULT = new PrimitiveType(nameleft, DataTypes.INT);
	RESULT.incrementDimension();
:};


formals ::= {:
	RESULT = new ArrayList<Formal>();
:}
| formals_list:list {: 
	RESULT = list; 
:};


fomals_list ::= type:t ID:name 	{: //this is param list for a method
	Formal var = new Formal(t,name);
	RESULT = new ArrayList<Formal>();
	RESULT.add(var);
:}
| formals:vars COMMA type:t ID:name	{:
	Formal var = new Formal(t,name);
	vars.add(var);
	RESULT = vars;
:};