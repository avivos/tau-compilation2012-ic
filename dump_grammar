 [java] ===== Productions =====
     [java] [0] program ::= class_list 
     [java] [1] $START ::= program EOF 
     [java] [2] class_list ::= class_list classDecl 
     [java] [3] class_list ::= 
     [java] [4] classDecl ::= CLASS CLASS_ID LCBR class_code RCBR 
     [java] [5] classDecl ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR class_code RCBR 
     [java] [6] class_code ::= class_code field_list 
     [java] [7] class_code ::= class_code method 
     [java] [8] class_code ::= 
     [java] [9] field_list ::= type multi_id SEMI 
     [java] [10] multi_id ::= ID 
     [java] [11] multi_id ::= multi_id COMMA ID 
     [java] [12] type ::= INT 
     [java] [13] type ::= BOOLEAN 
     [java] [14] type ::= STRING 
     [java] [15] type ::= CLASS_ID 
     [java] [16] type ::= type LB RB 
     [java] [17] method ::= type ID LP formals RP LCBR stmt_list RCBR 
     [java] [18] method ::= STATIC type ID LP formals RP LCBR stmt_list RCBR 
     [java] [19] method ::= VOID ID LP formals RP LCBR stmt_list RCBR 
     [java] [20] method ::= STATIC VOID ID LP formals RP LCBR stmt_list RCBR 
     [java] [21] stmt ::= location ASSIGN expr SEMI 
     [java] [22] stmt ::= call SEMI 
     [java] [23] stmt ::= RETURN SEMI 
     [java] [24] stmt ::= RETURN expr SEMI 
     [java] [25] stmt ::= IF LP expr RP stmt_if 
     [java] [26] stmt ::= IF LP expr RP stmt_if ELSE stmt_if 
     [java] [27] stmt ::= WHILE LP expr RP stmt 
     [java] [28] stmt ::= BREAK SEMI 
     [java] [29] stmt ::= CONTINUE SEMI 
     [java] [30] stmt ::= stmt_block 
     [java] [31] stmt ::= type ID SEMI 
     [java] [32] stmt ::= type ID ASSIGN expr SEMI 
     [java] [33] stmt ::= error SEMI 
     [java] [34] stmt_if ::= location ASSIGN expr SEMI 
     [java] [35] stmt_if ::= call SEMI 
     [java] [36] stmt_if ::= RETURN SEMI 
     [java] [37] stmt_if ::= RETURN expr SEMI 
     [java] [38] stmt_if ::= IF LP expr RP stmt_if 
     [java] [39] stmt_if ::= IF LP expr RP stmt_if ELSE stmt_if 
     [java] [40] stmt_if ::= WHILE LP expr RP stmt 
     [java] [41] stmt_if ::= BREAK SEMI 
     [java] [42] stmt_if ::= CONTINUE SEMI 
     [java] [43] stmt_if ::= stmt_block 
     [java] [44] stmt_if ::= error SEMI 
     [java] [45] stmt_block ::= LCBR stmt_list RCBR 
     [java] [46] stmt_list ::= stmt_list stmt 
     [java] [47] stmt_list ::= 
     [java] [48] expr ::= location 
     [java] [49] expr ::= call 
     [java] [50] expr ::= THIS 
     [java] [51] expr ::= NEW CLASS_ID LP RP 
     [java] [52] expr ::= NEW type LB expr RB 
     [java] [53] expr ::= expr DOT LENGTH 
     [java] [54] expr ::= binop 
     [java] [55] expr ::= unop 
     [java] [56] expr ::= literal 
     [java] [57] expr ::= LP expr RP 
     [java] [58] call ::= staticCall 
     [java] [59] call ::= virtualCall 
     [java] [60] expr_list ::= expr 
     [java] [61] expr_list ::= expr_list COMMA expr 
     [java] [62] staticCall ::= CLASS_ID DOT ID LP RP 
     [java] [63] staticCall ::= CLASS_ID DOT ID LP expr_list RP 
     [java] [64] virtualCall ::= ID LP RP 
     [java] [65] virtualCall ::= ID LP expr_list RP 
     [java] [66] virtualCall ::= expr DOT ID LP RP 
     [java] [67] virtualCall ::= expr DOT ID LP expr_list RP 
     [java] [68] location ::= ID 
     [java] [69] location ::= expr DOT ID 
     [java] [70] location ::= expr LB expr RB 
     [java] [71] binop ::= expr PLUS expr 
     [java] [72] binop ::= expr MINUS expr 
     [java] [73] binop ::= expr MULTIPLY expr 
     [java] [74] binop ::= expr DIVIDE expr 
     [java] [75] binop ::= expr MOD expr 
     [java] [76] binop ::= expr LAND expr 
     [java] [77] binop ::= expr LOR expr 
     [java] [78] binop ::= expr LT expr 
     [java] [79] binop ::= expr LTE expr 
     [java] [80] binop ::= expr GT expr 
     [java] [81] binop ::= expr GTE expr 
     [java] [82] binop ::= expr EQUAL expr 
     [java] [83] binop ::= expr NEQUAL expr 
     [java] [84] unop ::= MINUS expr 
     [java] [85] unop ::= LNEG expr 
     [java] [86] literal ::= INTEGER 
     [java] [87] literal ::= QUOTE 
     [java] [88] literal ::= TRUE 
     [java] [89] literal ::= FALSE 
     [java] [90] literal ::= NULL 
     [java] [91] formals ::= 
     [java] [92] formals ::= formals_list 
     [java] [93] formals_list ::= type ID 
     [java] [94] formals_list ::= formals_list COMMA type ID 